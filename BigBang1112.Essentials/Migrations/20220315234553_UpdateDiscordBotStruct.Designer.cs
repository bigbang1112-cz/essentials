// <auto-generated />
using System;
using BigBang1112.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BigBang1112.Migrations
{
    [DbContext(typeof(AccountsContext))]
    [Migration("20220315234553_UpdateDiscordBotStruct")]
    partial class UpdateDiscordBotStruct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BigBang1112.Models.Db.AccountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DiscordId")
                        .HasColumnType("int");

                    b.Property<int?>("GitHubId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastSeenOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ManiaPlanetId")
                        .HasColumnType("int");

                    b.Property<int?>("MergedIntoId")
                        .HasColumnType("int");

                    b.Property<int?>("TrackmaniaId")
                        .HasColumnType("int");

                    b.Property<int?>("TwitterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("GitHubId")
                        .IsUnique();

                    b.HasIndex("ManiaPlanetId")
                        .IsUnique();

                    b.HasIndex("MergedIntoId");

                    b.HasIndex("TrackmaniaId")
                        .IsUnique();

                    b.HasIndex("TwitterId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.AdminModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordAuthModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AvatarHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<short>("Discriminator")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.ToTable("DiscordAuth");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotCommandVisibilityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BotId")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscordBotGuildModelId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscordBotJoinedGuildModelId")
                        .HasColumnType("int");

                    b.Property<bool>("Visibility")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("DiscordBotGuildModelId");

                    b.HasIndex("DiscordBotJoinedGuildModelId");

                    b.ToTable("DiscordBotCommandVisibilities");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotGuildModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CommandVisibility")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.ToTable("DiscordBotGuilds");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotChannelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GuildId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("DiscordBotChannels");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotJoinedGuildModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BotId")
                        .HasColumnType("int");

                    b.Property<bool>("CommandVisibility")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GuildId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.HasIndex("GuildId");

                    b.ToTable("DiscordBotJoinedGuilds");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DiscordBots");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.GitHubAuthModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<uint>("Uid")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.ToTable("GitHubAuth");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.ManiaPlanetAuthModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime?>("ExpiresOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("LbManialinkId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime?>("RequestedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LbManialinkId")
                        .IsUnique();

                    b.HasIndex("ZoneId");

                    b.ToTable("ManiaPlanetAuth");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.ManiaPlanetLbManialinkModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsIWRUP")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoinedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastVisitedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Visits")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LbManialink");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.TrackmaniaAuthModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("Login")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TrackmaniaAuth");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.TwitterAuthModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.ToTable("TwitterAuth");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.ZoneModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsMP")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTM2020")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTMUF")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("Id");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.AccountModel", b =>
                {
                    b.HasOne("BigBang1112.Models.Db.DiscordAuthModel", "Discord")
                        .WithOne("Account")
                        .HasForeignKey("BigBang1112.Models.Db.AccountModel", "DiscordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BigBang1112.Models.Db.GitHubAuthModel", "GitHub")
                        .WithOne("Account")
                        .HasForeignKey("BigBang1112.Models.Db.AccountModel", "GitHubId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BigBang1112.Models.Db.ManiaPlanetAuthModel", "ManiaPlanet")
                        .WithOne("Account")
                        .HasForeignKey("BigBang1112.Models.Db.AccountModel", "ManiaPlanetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BigBang1112.Models.Db.AccountModel", "MergedInto")
                        .WithMany()
                        .HasForeignKey("MergedIntoId");

                    b.HasOne("BigBang1112.Models.Db.TrackmaniaAuthModel", "Trackmania")
                        .WithOne("Account")
                        .HasForeignKey("BigBang1112.Models.Db.AccountModel", "TrackmaniaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BigBang1112.Models.Db.TwitterAuthModel", "Twitter")
                        .WithOne("Account")
                        .HasForeignKey("BigBang1112.Models.Db.AccountModel", "TwitterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Discord");

                    b.Navigation("GitHub");

                    b.Navigation("ManiaPlanet");

                    b.Navigation("MergedInto");

                    b.Navigation("Trackmania");

                    b.Navigation("Twitter");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.AdminModel", b =>
                {
                    b.HasOne("BigBang1112.Models.Db.AccountModel", "Account")
                        .WithOne("Admin")
                        .HasForeignKey("BigBang1112.Models.Db.AdminModel", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotCommandVisibilityModel", b =>
                {
                    b.HasOne("BigBang1112.Models.Db.DiscordBotModel", "Bot")
                        .WithMany()
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang1112.Models.Db.DiscordBotChannelModel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang1112.Models.Db.DiscordBotGuildModel", null)
                        .WithMany("CommandVisibilities")
                        .HasForeignKey("DiscordBotGuildModelId");

                    b.HasOne("BigBang1112.Models.Db.DiscordBotJoinedGuildModel", null)
                        .WithMany("CommandVisibilities")
                        .HasForeignKey("DiscordBotJoinedGuildModelId");

                    b.Navigation("Bot");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotChannelModel", b =>
                {
                    b.HasOne("BigBang1112.Models.Db.DiscordBotGuildModel", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotJoinedGuildModel", b =>
                {
                    b.HasOne("BigBang1112.Models.Db.DiscordBotModel", "Bot")
                        .WithMany("JoinedGuilds")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BigBang1112.Models.Db.DiscordBotGuildModel", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bot");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.ManiaPlanetAuthModel", b =>
                {
                    b.HasOne("BigBang1112.Models.Db.ManiaPlanetLbManialinkModel", "LbManialink")
                        .WithOne("Auth")
                        .HasForeignKey("BigBang1112.Models.Db.ManiaPlanetAuthModel", "LbManialinkId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BigBang1112.Models.Db.ZoneModel", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LbManialink");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.AccountModel", b =>
                {
                    b.Navigation("Admin");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordAuthModel", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotGuildModel", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("CommandVisibilities");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotJoinedGuildModel", b =>
                {
                    b.Navigation("CommandVisibilities");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.DiscordBotModel", b =>
                {
                    b.Navigation("JoinedGuilds");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.GitHubAuthModel", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.ManiaPlanetAuthModel", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("BigBang1112.Models.Db.ManiaPlanetLbManialinkModel", b =>
                {
                    b.Navigation("Auth")
                        .IsRequired();
                });

            modelBuilder.Entity("BigBang1112.Models.Db.TrackmaniaAuthModel", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("BigBang1112.Models.Db.TwitterAuthModel", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
