@page "/account/merge"
@attribute [Authorize]

@inject IAccountMergeService _accountMergeService
@inject AuthenticationStateProvider _auth
@inject NavigationManager _navManager

<PageTitle>Merge accounts | BigBang1112.cz</PageTitle>

@if (Loaded)
{
	<h1>Accounts can be merged</h1>

	@foreach (var account in new AccountModel?[] { CurrentAccount, null, AccountToMergeInto })
	{
		if (account is not null)
		{
			<div>
				<h2>@account.Guid (@(account.IsAdmin ? "Admin" : "User"))</h2>
				<ul>
					<li>Created on: @account.CreatedOn</li>
					<li>Last seen on @account.LastSeenOn</li>
				</ul>
				<table border="1">
					<thead>
						<tr>
							<th>Platform</th>
							<th>Identity</th>
						</tr>
					</thead>
					<tbody>

					@if (account.ManiaPlanet is not null)
					{
						<tr>
							<td>ManiaPlanet</td>
							<td data-nickname="@account.ManiaPlanet.Nickname">@TextFormatter.Deformat(account.ManiaPlanet.Nickname) (@account.ManiaPlanet.Login)</td>
						</tr>
					}

					@if (account.Trackmania is not null)
					{
						<tr>
							<td>Trackmania</td>
							<td>@account.Trackmania.Nickname (@account.Trackmania.Login)</td>
						</tr>
					}

					@if (account.Discord is not null)
					{
						<tr>
							<td>Discord</td>
							<td>@account.Discord.Name#@account.Discord.Discriminator (@account.Discord.Snowflake)</td>
						</tr>
					}

					@if (account.GitHub is not null)
					{
						<tr>
							<td>GitHub</td>
							<td>@account.GitHub.DisplayName (@account.GitHub.Name)</td>
						</tr>
					}

					@if (account.Twitter is not null)
					{
						<tr>
							<td>Twitter</td>
							<td>@account.Twitter.Name</td>
						</tr>
					}

					</tbody>
				</table>
			</div>
		}
		else
		{
			<button disabled>-></button>
		}
	}

	<button @onclick="MergeAsync">Merge accounts into one</button>

	<a href="/">Don't merge</a>
}
else
{
	<h1>Loading...</h1>
}

@code {

	private bool Loaded { get; set; }

	private AccountModel AccountToMergeInto { get; set; } = default!;
	private AccountModel CurrentAccount { get; set; } = default!;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
		{
			return;
		}

		var auth = await _auth.GetAuthenticationStateAsync();

		var accounts = await _accountMergeService.GetAccountsToMergeAsync(auth.User);

		if (!accounts.HasValue)
		{
			await SlowlyRedirectAsync();
			return;
		}

		AccountToMergeInto = accounts.Value.accountToMergeInto;
		CurrentAccount = accounts.Value.currentAccount;

		if (AccountToMergeInto == CurrentAccount) // Nothing to merge
		{
			await SlowlyRedirectAsync();
		}

		Loaded = true;

		StateHasChanged();
	}

	private async Task SlowlyRedirectAsync()
	{
		await Task.Delay(500);
		_navManager.NavigateTo("/");
	}

	private async Task MergeAsync()
	{
		var auth = await _auth.GetAuthenticationStateAsync();

		await _accountMergeService.MergeAccountsAsync(auth.User);
		_navManager.NavigateTo("/");
	}
}
