<button
	class="button @ButtonClasses" style="@Style"
	@onclick="eventArgs => ChangeChecked(!Checked)">

	@if (visiblyChecked)
	{
		<span><i class="fa-solid fa-check"></i></span>
	}
	else if (Loading)
	{
        <span>&nbsp;</span>
    }
    else
    {
        @if (DisabledText is null)
        {
            <span><i class="fa-solid fa-xmark"></i></span>
        }
        else
        {
            <span>@DisabledText</span>
        }
    }
</button>

@if (Label is not null)
{
	<span style="margin-left: 0.7rem">@Label</span>
}

@code {
    private bool visiblyChecked;
    private bool actuallyChecked;

    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter]
    public bool VerySmall { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? DisabledText { get; set; }

    [Parameter]
    public bool Checked
    {
        get => actuallyChecked;
        set
        {
            actuallyChecked = value;
            visiblyChecked = value;
        }
    }
    
    [Parameter]
    public string? Style { get; set; }

	public bool Loading { get; private set; }

	protected override void OnInitialized()
	{
		visiblyChecked = Checked;
	}

	private string VerySmallClass => VerySmall ? "button-very-small" : "button-small";
	private string DisabledClass => visiblyChecked ? "" : " button-disabled";
	private string ButtonClasses => $"{VerySmallClass}{DisabledClass}";

	private async Task ChangeChecked(bool enabled)
	{
		actuallyChecked = enabled;

		Loading = true;
		StateHasChanged();

		await CheckedChanged.InvokeAsync(enabled);

		visiblyChecked = actuallyChecked;

		Loading = false;
	}
}
